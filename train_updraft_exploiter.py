import datetime
import time
import os
import shutil
import gym
import torch
import collections
import torch.nn as nn
from torch.distributions import MultivariateNormal, Normal
from torch.nn.utils.rnn import pack_padded_sequence, pad_packed_sequence, pad_sequence
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from torch.utils.data import DataLoader
from torch.utils.data import Dataset, TensorDataset

import evaluate_updraft_exploiter
from parameters import params_environment, params_triangle_soaring
from subtasks.updraft_exploiter import params_updraft_exploiter
from subtasks.updraft_exploiter import model_updraft_exploiter

device = torch.device("cuda:0")


# device = torch.device("cpu")

class Memory:
    def __init__(self):
        self.actions = []
        self.up_pos = []
        self.logprobs = []
        self.rewards = []
        self.is_terminals = []

    def clear_memory(self):
        del self.actions[:]
        del self.up_pos[:]
        del self.logprobs[:]
        del self.rewards[:]
        del self.is_terminals[:]


class PPO:
    def __init__(self):
        # instantiate parameters
        self._params_rl = params_updraft_exploiter.params_rl()

        # instantiate actor-critic model
        self.policy = model_updraft_exploiter.ActorCritic().to(device)
        # self.policy.load_state_dict(torch.load("actor_critic_network_final_01-April-2020_14-58.pt"))
        self.policy_old = model_updraft_exploiter.ActorCritic().to(device)
        self.policy_old.load_state_dict(self.policy.state_dict())

        # setup optimizer
        self.optimizer = torch.optim.Adam(self.policy.parameters(),
                                          lr=self._params_rl.LEARNING_RATE, betas=(0.9, 0.999))
        self.MseLoss = nn.MSELoss()

    def select_action(self, rel_updraft_pos, memory=None, validation_mask=False):
        rel_updraft_pos = torch.FloatTensor(rel_updraft_pos).view(1, -1, 2).to(device)  # timesteps x updrafts x features
        return self.policy_old.act(rel_updraft_pos, memory, validation_mask).cpu().data.numpy().flatten()

    def pad_updraft_observations(self, up_obs_lst):
        # init tensors for padding
        up_obs_padded = torch.zeros(len(up_obs_lst), max([len(row) for batch in up_obs_lst for row in batch]), 2)
        seq_length = torch.zeros(len(up_obs_lst), dtype=torch.int)

        # loop over batch TODO: surely can be done without looping
        k = 0
        for up_obs in up_obs_lst:
            seq_length[k] = up_obs.size(1)
            up_obs_padded[k, 0:int(seq_length[k]), :] = up_obs
            k += 1

        return up_obs_padded.to(device), seq_length.to(device)

    def update(self, memory):
        # Monte Carlo estimate of rewards:
        returns_to_go = []
        # discounted_reward = 0
        discounted_reward = self.policy_old.critic(memory.up_pos[-1])
        for reward, is_terminal in zip(reversed(memory.rewards), reversed(memory.is_terminals)):
            if is_terminal:
                discounted_reward = 0
            discounted_reward = reward + (self._params_rl.GAMMA * discounted_reward)
            returns_to_go.insert(0, discounted_reward)

        # Normalizing the rewards:
        returns_to_go = torch.tensor(returns_to_go).to(device)
        returns_to_go = (returns_to_go - returns_to_go.mean()) / (returns_to_go.std() + 1e-5)
        returns_to_go = returns_to_go.unsqueeze(1)

        # convert list to tensor
        old_actions = torch.squeeze(torch.stack(memory.actions), 1).detach()
        old_logprobs = torch.squeeze(torch.stack(memory.logprobs), 1).detach()

        # pad updraft observations (due to sequences potentially of different length)
        old_up_obs_padded, seq_length = self.pad_updraft_observations(memory.up_pos)

        # put batch to data_loader
        train_loader = DataLoader(dataset=TensorDataset(old_actions, old_logprobs, old_up_obs_padded, seq_length,
                                                        returns_to_go),
                                  batch_size=self._params_rl.MINIBATCHSIZE, shuffle=True)

        # Optimize policy for K epochs:
        for _ in range(self._params_rl.K_EPOCH):
            for mini_batch in train_loader:
                # get sampled data in mini-batch and send them to device
                old_actions, old_logprobs, old_up_obs_padded, seq_length, returns_to_go = mini_batch

                # pack padded sequence
                old_up_obs_packed = pack_padded_sequence(old_up_obs_padded, seq_length,
                                                         batch_first=True, enforce_sorted=False)

                # evaluate old actions and values
                logprobs, state_values, dist_entropy = self.policy.evaluate(old_up_obs_packed, old_actions)

                # ppo ratio
                ratios = torch.exp(logprobs - old_logprobs)

                # surrogate loss
                advantages = returns_to_go - state_values.detach()
                surr1 = ratios * advantages
                surr2 = torch.clamp(ratios, 1 - self._params_rl.EPS_CLIP, 1 + self._params_rl.EPS_CLIP) * advantages
                loss = -torch.min(surr1, surr2).mean() + 0.5 * self.MseLoss(state_values, returns_to_go)

                # gradient step
                self.optimizer.zero_grad()
                loss.mean().backward()
                self.optimizer.step()

        # transfer weights
        self.policy_old.load_state_dict(self.policy.state_dict())


def main():
    # set up training
    env = gym.make('glider3D-v0', agent='updraft_exploiter')
    ppo = PPO()
    memory = Memory()

    # load parameters
    _params_rl = params_updraft_exploiter.params_rl()
    _params_agent = params_updraft_exploiter.params_agent()
    _params_logging = params_updraft_exploiter.params_logging()

    # create folder to store data for the experiment running
    experimentID = 1
    dirName = "{}_informed_updraft_exploiter_experiment".format(experimentID)
    while os.path.exists(dirName):
        experimentID += 1
        dirName = "{}_".format(experimentID) + dirName.split('_', 1)[1]
    os.mkdir(dirName)
    shutil.copytree(os.getcwd(), os.path.join(dirName, "Sources_unzipped"),
                    ignore=shutil.ignore_patterns('*experiment*', 'archive', 'tests', '.git*', 'rl_ccs_experiments',
                                                  '.idea', '__pycache__', 'README*'))
    os.chdir(dirName)
    shutil.make_archive("Sources", 'zip', "Sources_unzipped")
    shutil.rmtree("Sources_unzipped")
    print("Directory for running experiment no. {} created".format(experimentID))

    # save parameters to file
    parameterFile = open("parameterFile.txt", "w")
    parameterFile.write(
        format(vars(_params_rl)) + "\n" +
        format(vars(params_updraft_exploiter.params_model())) + "\n" +
        format(vars(_params_agent)) + "\n" +
        format(vars(_params_logging)) + "\n\n" +
        format(vars(params_triangle_soaring.TaskParameters())) + "\n\n" +
        format(vars(params_environment.params_sim())) + "\n" +
        format(vars(params_environment.params_glider())) + "\n" +
        format(vars(params_environment.params_physics())) + "\n" +
        format(vars(params_environment.params_wind())))
    parameterFile.close()

    # set random seed
    if _params_rl.SEED:
        print("Random Seed: {}".format(_params_rl.SEED))
        torch.manual_seed(_params_rl.SEED)
        env.seed(_params_rl.SEED)
        np.random.seed(_params_rl.SEED)

    # set up file to save average returns
    returnFile = open("returnFile_running.dat", "w")
    returnFile.write("iterations,episodes,avg_returns\n")
    returnFile.close()

    # initialize variables
    returns = collections.deque(maxlen=10)
    average_returns = []
    policy_iterations = 0
    episodes = 0
    interactions = 0
    ret = 0
    env.reset()
    observation = env.get_observation()

    # training loop
    while policy_iterations < (int(_params_rl.N_ITERATIONS)):

        # while not done:

        # run policy_old
        action = ppo.select_action(observation, memory)
        _, reward, done, _ = env.step(action)
        observation = env.get_observation()
        ret += reward

        # store reward and done flag:
        memory.rewards.append(reward)
        memory.is_terminals.append(done)
        interactions += 1

        # stop rollout if episode is completed
        if done:
            returns.append(ret)
            episodes += 1
            ret = 0
            env.reset()
            observation = env.get_observation()

            n_mean = 10 if len(returns) >= 10 else len(returns)
            average_returns.append(np.convolve(list(returns)[-n_mean:], np.ones((n_mean,)) / n_mean, mode='valid')[0])

        # update policy every BATCHSIZE interactions
        if interactions % _params_rl.BATCHSIZE == 0:
            ppo.policy.train()
            ppo.update(memory)
            ppo.policy.eval()
            memory.clear_memory()
            interactions = 0
            policy_iterations += 1

            if len(average_returns) and policy_iterations % _params_logging.PRINT_INTERVAL == 0:
                print("# policy iteration: {}/{} \t\t avg return over last 10 episodes: {:.1f}"
                      .format(policy_iterations, int(_params_rl.N_ITERATIONS), average_returns[-1]))

                with open("returnFile_running.dat", "a+") as returnFile:
                    returnFile.write(format(policy_iterations) + "," + format(episodes) + ","
                                     + '{:.1f}'.format(average_returns[-1]) + "\n")

            if policy_iterations % _params_logging.SAVE_INTERVAL == 0:
                torch.save(ppo.policy.state_dict(),
                           "updraft_exploiter_actor_critic_iter_{}".format(policy_iterations) + ".pt")
                evaluate_updraft_exploiter.main(env, ppo, policy_iterations, _params_agent, validation_mask=True)

    # display final results
    now = datetime.datetime.now()
    returns_to_plot = pd.read_csv('returnFile_running.dat')
    returns_to_plot.plot(x='iterations', y='avg_returns')
    plt.title("evolution of average returns")
    plt.xlabel("policy iterations (-)")
    plt.ylabel("average returns (-)")
    plt.grid(True)
    plt.savefig("average_returns_" + now.strftime("%d-%B-%Y_%H-%M") + ".png")
    plt.show()

    # save actor-critic
    torch.save(ppo.policy.state_dict(),
               "updraft_exploiter_actor_critic_final_" + now.strftime("%d-%B-%Y_%H-%M") + ".pt")

    # rename parameter file consistently
    os.rename(parameterFile.name, "parameters_" + now.strftime("%d-%B-%Y_%H-%M") + ".txt")

    # rename return file consistently
    returnFile.close()
    os.rename(returnFile.name, "average_returns_" + now.strftime("%d-%B-%Y_%H-%M") + ".dat")

    env.close()


if __name__ == '__main__':
    main()